import json
import requests

def get_measuring_stations():
    URL = 'http://api.gios.gov.pl/pjp-api/rest/station/findAll'
    a = requests.get(URL)
    dane = json.loads(a.text)
    return dane

def get_measuring_stations_for_city(city):
    data = get_measuring_stations()
    stacje_w_miescie = []
    for slownik in data:
        if slownik['city'] != None:
            if slownik['city']['name'] == city:
                stacje_w_miescie.append(slownik)
        else:
            if slownik['stationName'] == city:
                stacje_w_miescie.append(slownik)
    if len(stacje_w_miescie) == 0:
        return 'Brak danych'
    else:
        return stacje_w_miescie
    
def get_sensors(station_id):
    URL = 'http://api.gios.gov.pl/pjp-api/rest/station/sensors/{}'.format(station_id)
    s = requests.get(URL)
    tresc = json.loads(s.text)
    return tresc

def get_sensors_for_city(city):
    stacja = get_measuring_stations_for_city(city)
    stanowiska_w_miescie = []
    if stacja == 'Brak danych':
        return 'Brak danych'
    else:
        for slown in stacja:
            stanowiska_w_miescie.append(get_sensors(slown['id']))
    return stanowiska_w_miescie
        
def stan_zanieczyszczen_dla_stacji(station_id):
    stanowiska = get_sensors(station_id)
    dane = []
    dane_aktualne = []
    for ident in stanowiska:
        URL = 'http://api.gios.gov.pl/pjp-api/rest/data/getData/{}'.format(ident['id'])
        b = requests.get(URL)
        wynik = json.loads(b.text)
        dane.append(wynik)
    #pobiera dane aktualne, czyli ostatni pomiar
    #wyłączone do wykresu
    """for y in dane:
        dane_aktualne.append([y['key'], y['values'][0]])
    return dane_aktualne"""
    return dane

def poziom_zagrożenia_dla_stacji(station_id):
    wyniki = stan_zanieczyszczen_dla_stacji(station_id)
    for slow in wyniki:
        if slow['key'] == 'PM10':
            if type(slow['values'][0]['value']) == float:
                if slow['values'][0]['value'] <= 50.00:
                    print('Poziom dopuszalny')
                elif slow['values'][0]['value'] <= 200.00:
                    print('Poziom informowania')
                elif slow['values'][0]['value'] >= 300.00:
                    print('Poziom alarmowy')
            else:
                print('Brak aktualnych danych dla PM10.')
        else:
            print('Stanowisko pomiarowe bada w kierunku {} - brak norm.'.format(slow['key']))


def current_state_for_city(city):
    stan_pomiar = get_sensors_for_city(city)
    stan_miasto = []
    aktualny_stan_miasto_CO = []
    aktualny_stan_miasto_PM10 = []
    aktualny_stan_miasto_C6H6 = []
    aktualny_stan_miasto_NO2 = []
    aktualny_stan_miasto_PM25 = []
    aktualny_stan_miasto_O3 = []
    aktualny_stan_miasto_SO2 = []
    
    if stan_pomiar == 'Brak danych':
        return 'Brak danych'
    else:
        for lista in stan_pomiar:
            for slo in lista:
                URL = 'http://api.gios.gov.pl/pjp-api/rest/data/getData/{}'.format(slo['id'])
                f = requests.get(URL)
                wynik1 = json.loads(f.text)
                stan_miasto.append(wynik1)
    
    for y in stan_miasto:
        if y['key'] == 'CO' and y['values'][0]['value'] != None:
            aktualny_stan_miasto_CO.append(y['values'][0]['value'])
        elif y['key'] == 'PM10' and y['values'][0]['value'] != None:
            aktualny_stan_miasto_PM10.append(y['values'][0]['value'])
        elif y['key'] == 'C6H6' and y['values'][0]['value'] != None:
            aktualny_stan_miasto_C6H6.append(y['values'][0]['value'])
        elif y['key'] == 'NO2' and y['values'][0]['value'] != None:
            aktualny_stan_miasto_NO2.append(y['values'][0]['value'])
        elif y['key'] == 'PM2.5' and y['values'][0]['value'] != None:
            aktualny_stan_miasto_PM25.append(y['values'][0]['value'])
        elif y['key'] == 'O3' and y['values'][0]['value'] != None:
            aktualny_stan_miasto_O3.append(y['values'][0]['value'])
        elif y['key'] == 'SO2' and y['values'][0]['value'] != None:
            aktualny_stan_miasto_SO2.append(y['values'][0]['value'])
    
    srednie_wskazania = []   
    if len(aktualny_stan_miasto_CO) > 0:
        midCO = sum(aktualny_stan_miasto_CO) / len(aktualny_stan_miasto_CO)
        srednie_wskazania.append({'CO' : midCO})
        
    if len(aktualny_stan_miasto_PM10) > 0:
        midPM10 = sum(aktualny_stan_miasto_PM10) / len(aktualny_stan_miasto_PM10)
        srednie_wskazania.append({'PM10' : midPM10})
        
    if len(aktualny_stan_miasto_C6H6) > 0:
        midC6H6 = sum(aktualny_stan_miasto_C6H6) / len(aktualny_stan_miasto_C6H6)
        srednie_wskazania.append({'C6H6' : midC6H6})
    
    if len(aktualny_stan_miasto_NO2) > 0:
        midNO2 = sum(aktualny_stan_miasto_NO2) / len(aktualny_stan_miasto_NO2)
        srednie_wskazania.append({'NO2' : midNO2})
    
    if len(aktualny_stan_miasto_PM25) > 0:
        midPM25 = sum(aktualny_stan_miasto_PM25) / len(aktualny_stan_miasto_PM25)
        srednie_wskazania.append({'PM2.5' : midPM25})
    
    if len(aktualny_stan_miasto_O3) > 0:
        midO3 = sum(aktualny_stan_miasto_O3) / len(aktualny_stan_miasto_O3)
        srednie_wskazania.append({'O3' : midO3})
    
    if len(aktualny_stan_miasto_SO2) > 0:
        midSO2 = sum(aktualny_stan_miasto_SO2) / len(aktualny_stan_miasto_SO2)
        srednie_wskazania.append({'SO2' : midSO2})
        
       
    if len(srednie_wskazania) == 0:
        return 'Brak aktualnych danych'
    else:
        return srednie_wskazania
        

import matplotlib.pyplot as plt

def wykres_zanieczyszczenia_dla_stacji(station_id):
    dane1 = stan_zanieczyszczen_dla_stacji(station_id)
    PM10 = []
    NO2 = []
    PM25 = []
    O3 = []
    SO2 = []
    CO = []
    C6H6 = []
    czas = []
    
    for slownik in dane1:
        for slownik2 in slownik['values'][0:24]:
            czas.append(slownik2['date'])
            if slownik['key'] == 'PM10':
                PM10.append(slownik2['value'])
            elif slownik['key'] == 'NO2':
                NO2.append(slownik2['value'])
            elif slownik['key'] == 'PM2.5':
                PM25.append(slownik2['value'])
            elif slownik['key'] == 'O3':
                O3.append(slownik2['value'])
            elif slownik['key'] == 'SO2':
                SO2.append(slownik2['value'])
            elif slownik['key'] == 'CO':
                CO.append(slownik2['value'])
            elif slownik['key'] == 'C6H6':
                C6H6.append(slownik2['value'])
    
    if len(PM10) < 1:
        for x in range(1, 25):
            PM10.append(0)
            
    if len(NO2) < 1:
        for x in range(1, 25):
            NO2.append(0)
            
    if len(PM25) < 1:
        for x in range(1, 25):
            PM25.append(0)
            
    if len(O3) < 1:
        for x in range(1, 25):
            O3.append(0)
            
    if len(SO2) < 1:
        for x in range(1, 25):
            SO2.append(0)
            
    if len(CO) < 1:
        for x in range(1, 25):
            CO.append(0)
            
    if len(C6H6) < 1:
        for x in range(1, 25):
            C6H6.append(0)
            
    czas = czas[0:24]
    
    if len(czas) < 1:
        print('Brak danych pomiarowych dla podanego numeru stacji')
    else:
        plt.plot(czas, PM10, 'r-', czas, NO2, 'b-' , czas, PM25, 'g-', czas, O3, 'y-', czas, SO2, 'k-', czas, CO, 'r:' , czas, C6H6, 'b:')
        plt.legend(('PM10', 'NO2', 'PM2.5', 'O3', 'SO2', 'CO', 'benzen'))
        plt.xlabel('CZAS')
        plt.ylabel('POZIOM ZANIECZYSZCZENIA')
        plt.title('Wykres zanieczyszczenia od czasu')
        plt.grid(True)
        plt.show()
